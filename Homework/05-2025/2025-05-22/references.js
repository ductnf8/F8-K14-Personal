import { questions, money } from "./questions.js"
import { resetBackground, onShowQuestion, checkAnswer, getNextQuestion, showNextQuestion, getCustomAudienceVote, shuffle, getSafeMoney, getPrizeMoney } from "./render.js"

// L·∫•y c√°c tham chi·∫øu DOM c·∫ßn thi·∫øt cho giao di·ªán
const questionRef = document.querySelector('.question')
const btnCheck = document.querySelector('.check-btn')
const overlay = document.querySelector('.overlay')
const menuBtn = document.querySelector('.mdi-menu')
const mark = document.querySelector('.mark')
const losePopup = document.getElementById('losePopup')
const safeMoneyRef = document.getElementById('safe-money')
const helpButtons = document.querySelectorAll('#help-5050, #help-call, #help-audience') // S·ª≠ d·ª•ng id ƒë·ªÉ l·∫•y n√∫t tr·ª£ gi√∫p
const numberQuesRef = document.querySelector('.numberQues')
const timeRef = document.getElementById('time')
const btnOk = document.querySelector('.btnOk')
const stopBtn = document.querySelector('.stop') // N√∫t d·ª´ng cu·ªôc ch∆°i

// Kh·ªüi t·∫°o bi·∫øn tr·∫°ng th√°i cho tr√≤ ch∆°i
const curQuestion = { value: null }
const curIndex = { value: -1 }
const usedHelps = { value: { fifty: false, call: false, audience: false } }
const currentTimer = { value: null }

// Hi·ªÉn th·ªã b·∫£ng m·ªëc ti·ªÅn th∆∞·ªüng ·ªü b√™n ph·∫£i
money.slice().reverse().forEach(m => {
    const moneyMark = document.createElement('p')
    moneyMark.className = 'money-mark'
    moneyMark.innerText = m.value
    mark.appendChild(moneyMark)
})

// G·∫Øn s·ª± ki·ªán click cho c√°c l·ª±a ch·ªçn ƒë√°p √°n
const addAnswerEvents = () => {
    for (const key of ['a', 'b', 'c', 'd']) {
        const answerRef = questionRef.querySelector(`.question-option[value="${key}"]`)
        answerRef.addEventListener('click', () => {
            if (!curQuestion.value || curQuestion.value.status === false) return
            curQuestion.value.userAns = key
            curQuestion.value.isCorrect = key === curQuestion.value.correctAns
            resetBackground()
            answerRef.style.backgroundColor = 'yellow'
        })
    }
}

// X·ª≠ l√Ω c√°c tr·ª£ gi√∫p (50:50, g·ªçi ƒëi·ªán, h·ªèi kh√°n gi·∫£)
helpButtons.forEach((btn, idx) => {
    btn.addEventListener('click', () => {
        console.log(`N√∫t tr·ª£ gi√∫p ${btn.id} ƒë∆∞·ª£c nh·∫•n`) // Debug ƒë·ªÉ ki·ªÉm tra s·ª± ki·ªán
        if (!curQuestion.value || curQuestion.value.status === false) {
            console.log('C√¢u h·ªèi kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ tr·∫£ l·ªùi')
            return
        }

        // Ki·ªÉm tra n·∫øu ch∆∞a ƒë·∫øn c√¢u 6
        if (curIndex.value < 5) {
            alert("B·∫°n ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng quy·ªÅn tr·ª£ gi√∫p t·ª´ c√¢u h·ªèi th·ª© 6 tr·ªü ƒëi!")
            return
        }

        // Tr·ª£ gi√∫p 50:50: ·∫©n n·ªôi dung 2 ƒë√°p √°n sai
        if (idx === 0) {
            if (usedHelps.value.fifty) return alert("B·∫°n ƒë√£ d√πng quy·ªÅn tr·ª£ gi√∫p 50:50 r·ªìi.")
            usedHelps.value.fifty = true
            btn.style.display = 'none' // ·∫®n n√∫t sau khi s·ª≠ d·ª•ng

            // H·ªßy ƒë·∫øm ng∆∞·ª£c c√¢u h·ªèi
            if (currentTimer.value) {
                clearInterval(currentTimer.value)
                currentTimer.value = null
                timeRef.innerText = '30'
            }

            const wrongOptions = ['a', 'b', 'c', 'd'].filter(k => k !== curQuestion.value.correctAns)
            shuffle(wrongOptions)
            const toClear = wrongOptions.slice(0, 2)

            toClear.forEach(k => {
                const ref = questionRef.querySelector(`.question-option[value="${k}"]`)
                if (ref) ref.innerText = '' // X√≥a n·ªôi dung c·ªßa 2 ƒë√°p √°n sai
            })

            // B·∫Øt ƒë·∫ßu l·∫°i ƒë·∫øm ng∆∞·ª£c 30 gi√¢y
            let timeLeft = 30
            timeRef.innerText = timeLeft
            currentTimer.value = setInterval(() => {
                timeLeft--
                timeRef.innerText = timeLeft
                if (timeLeft === 0) {
                    clearInterval(currentTimer.value)
                    currentTimer.value = null
                    timeRef.innerText = '30'
                    curQuestion.value.status = false
                    const prize = getSafeMoney(curIndex.value)
                    safeMoneyRef.innerText = prize
                    losePopup.style.display = 'block'
                    btnCheck.style.display = 'none'
                    alert('‚è±Ô∏è H·∫øt gi·ªù! B·∫°n ƒë√£ thua!')
                }
            }, 1000)
        }

        // Tr·ª£ gi√∫p g·ªçi ƒëi·ªán tho·∫°i: ƒë·∫øm ng∆∞·ª£c 30 gi√¢y
        if (idx === 1) {
            if (usedHelps.value.call) return alert("B·∫°n ƒë√£ d√πng quy·ªÅn g·ªçi ƒëi·ªán.")
            usedHelps.value.call = true
            btn.style.display = 'none' // ·∫®n n√∫t sau khi s·ª≠ d·ª•ng

            // H·ªßy ƒë·∫øm ng∆∞·ª£c c√¢u h·ªèi
            if (currentTimer.value) {
                clearInterval(currentTimer.value)
                currentTimer.value = null
            }

            let timeLeft = 30
            timeRef.innerText = timeLeft
            currentTimer.value = setInterval(() => {
                timeLeft--
                timeRef.innerText = timeLeft
                if (timeLeft === 0) {
                    clearInterval(currentTimer.value)
                    currentTimer.value = null
                    timeRef.innerText = '30'
                    alert(`‚è±Ô∏è H·∫øt gi·ªù! Ng∆∞·ªùi th√¢n nghƒ© l√†: ${curQuestion.value.correctAns.toUpperCase()}`)

                    // B·∫Øt ƒë·∫ßu l·∫°i ƒë·∫øm ng∆∞·ª£c 30 gi√¢y cho c√¢u h·ªèi
                    timeLeft = 30
                    timeRef.innerText = timeLeft
                    currentTimer.value = setInterval(() => {
                        timeLeft--
                        timeRef.innerText = timeLeft
                        if (timeLeft === 0) {
                            clearInterval(currentTimer.value)
                            currentTimer.value = null
                            timeRef.innerText = '30'
                            curQuestion.value.status = false
                            const prize = getSafeMoney(curIndex.value)
                            safeMoneyRef.innerText = prize
                            losePopup.style.display = 'block'
                            btnCheck.style.display = 'none'
                            alert('‚è±Ô∏è H·∫øt gi·ªù! B·∫°n ƒë√£ thua!')
                        }
                    }, 1000)
                }
            }, 1000)
        }

        // Tr·ª£ gi√∫p h·ªèi √Ω ki·∫øn kh√°n gi·∫£: d√πng 4 tham s·ªë c·ªë ƒë·ªãnh
        if (idx === 2) {
            if (usedHelps.value.audience) return alert("B·∫°n ƒë√£ d√πng quy·ªÅn h·ªèi kh√°n gi·∫£.")
            usedHelps.value.audience = true
            btn.style.display = 'none' // ·∫®n n√∫t sau khi s·ª≠ d·ª•ng

            // H·ªßy ƒë·∫øm ng∆∞·ª£c c√¢u h·ªèi
            if (currentTimer.value) {
                clearInterval(currentTimer.value)
                currentTimer.value = null
                timeRef.innerText = '30'
            }

            const result = getCustomAudienceVote(40, 30, 20, 10)
            alert(`üìä Kh√°n gi·∫£ b√¨nh ch·ªçn:\nA: ${result.a}%\nB: ${result.b}%\nC: ${result.c}%\nD: ${result.d}%`)

            // B·∫Øt ƒë·∫ßu l·∫°i ƒë·∫øm ng∆∞·ª£c 30 gi√¢y
            let timeLeft = 30
            timeRef.innerText = timeLeft
            currentTimer.value = setInterval(() => {
                timeLeft--
                timeRef.innerText = timeLeft
                if (timeLeft === 0) {
                    clearInterval(currentTimer.value)
                    currentTimer.value = null
                    timeRef.innerText = '30'
                    curQuestion.value.status = false
                    const prize = getSafeMoney(curIndex.value)
                    safeMoneyRef.innerText = prize
                    losePopup.style.display = 'block'
                    btnCheck.style.display = 'none'
                    alert('‚è±Ô∏è H·∫øt gi·ªù! B·∫°n ƒë√£ thua!')
                }
            }, 1000)
        }
    })
})

// ƒê√≥ng losePopup
btnOk.addEventListener('click', (e) => {
    losePopup.style.display = 'none'
})

// Hi·ªÉn th·ªã/·∫©n b·∫£ng m·ªëc ti·ªÅn khi nh·∫•n n√∫t menu
menuBtn.addEventListener('click', () => {
    overlay.style.display = 'flex'
})

overlay.addEventListener('click', (e) => {
    if (!e.target.closest('.mark')) {
        overlay.style.display = 'none'
    }
})

// D·ª´ng cu·ªôc ch∆°i v√† hi·ªÉn th·ªã losePopup v·ªõi s·ªë ti·ªÅn c·ªßa c√¢u ƒë√£ tr·∫£ l·ªùi ƒë√∫ng g·∫ßn nh·∫•t
stopBtn.addEventListener('click', () => {
    if (currentTimer.value) {
        clearInterval(currentTimer.value)
        currentTimer.value = null
        timeRef.innerText = '30'
    }
    if (curQuestion.value) {
        curQuestion.value.status = false
    }
    const prize = getPrizeMoney(curIndex.value)
    safeMoneyRef.innerText = prize
    losePopup.style.display = 'block'
    btnCheck.style.display = 'none'
})

// B·∫Øt ƒë·∫ßu tr√≤ ch∆°i
btnCheck.addEventListener('click', checkAnswer)
addAnswerEvents()
showNextQuestion()

export { questionRef, btnCheck, overlay, menuBtn, mark, losePopup, safeMoneyRef, helpButtons, numberQuesRef, timeRef, btnOk, stopBtn, curQuestion, curIndex, usedHelps, currentTimer, addAnswerEvents }